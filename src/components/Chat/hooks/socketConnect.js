import { useEffect } from 'react'; 
import { io } from "socket.io-client";
import { socketIoOptions, webServiceAPI } from '../../../utils/helpers'
import { onlineFriends, onlineFriend, offlineFriend, fetchChats, setSocket, receivedMessage, senderTyping, createChat, addUserToGroup, leaveCurrentChat, deleteCurrentChat } from '../../../store/actions/chat'

// A : we first dispatch fetchChats action to get all the chats from the DB, and then update our associated store thourgh associated reducers
// B: and once chats are collected, then we manage the sockets 
function useSocket (user, dispatch ){ 

    useEffect(() => { 
        dispatch(fetchChats()) // A
            .then( r => { 
                console.log(`${r?.length} opened conversation(s) for ${user?.firstName || user?.lastName || user?.email}`, r)            
                //B
                const socket = io(webServiceAPI.url, socketIoOptions);
                
                // update global chat store with the socket details    
                dispatch(setSocket(socket))

                socket.emit('join', user)

                socket.on('typing', (sender) => {
                    dispatch(senderTyping(sender))
                    console.log('typing', sender)
                })

                socket.on('friends', (friends) => {
                    dispatch(onlineFriends(friends))
                    console.log("Friends", friends);
                })

                socket.on('online', (user) => {
                    dispatch(onlineFriend(user))
                    console.log("Online", user);
                })

                socket.on('offline', (user) => {
                    dispatch(offlineFriend(user))
                    console.log("Offline", user);
                })

                socket.on('received', (message) => {
                    dispatch(receivedMessage(message, user.id))
                })

                socket.on('new-chat', (chat) => {
                    dispatch(createChat(chat))
                })

                socket.on('added-user-to-group', (group) => {
                    dispatch(addUserToGroup(group))
                })
                socket.on('remove-user-from-chat', (data) => {
                // event generated by the leaveChat helper function from the frontend (chat-frontend/src/utils/helpers/index.js => leaveChat Method)
                // complete process below:
                    // 1) origin chat-frontend/src/components/Chat/components/ChatHeader/ChatHeader.js => ...{showChatOptions && ... <div onClick={()=>{leaveChat(chat.id, socketRef)}}>...<p>Leave...</p></div>}
                    // 2) origin chat-frontend/src/utils/helpers.index.js => leaveChat() function ...
                    //      2) bis  origin chat-frontend/src/services/chatService.js => leaveCurrentChat()
                    //      2) ter  origin chat-backend/router/chat.js = route '/leave-current-chat' calling first the auth middleware to generate a req.user and then a leaveCurrentChat controller 
                    //      2) quar origin chat-backend/controllers/chatController.js => leaveCurrentChat() controller
                    // 3) ... the leaveChat() function in the 2) step has a .then(socketReference.emit('leave-current-chat', data)
                    // 4) origin chat-backend/socket/index.jsa => socket.on('leave-current-chat') listener does a io.to(socket).emit('remove-user-from-chat'...') for all users to be notified, for all their corresponding socketsif they are connected on multiple devices
                    // 5) we arrive HERE!
                    data.currentUserId = user.id
                    dispatch(leaveCurrentChat(data))
                })

                socket.on('delete-chat', (chatId) => {
                    dispatch(deleteCurrentChat(chatId))
                })
                            
                
            })
            .catch(err => console.log(err))
           
        
    }, [dispatch, user]) 

}

export default useSocket ;
